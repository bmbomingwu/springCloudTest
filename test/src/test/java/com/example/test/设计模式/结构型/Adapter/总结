适用场景：

已经存在的类，它的方法和需求不匹配（方法结构相同或相似）的情况。
使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。
优点：

能提高类的透明性和复用，现有的类复用但不需要改变。
目标类和适配器类解耦，提高程序的扩展性。
在很多业务场景中符合开闭原则。
缺点：

适配器编写过程需要全面考虑，可能会增加系统的复杂性。
增加代码阅读难度，降级代码可读性，过多使用适配器会使系统代码变得凌乱。
